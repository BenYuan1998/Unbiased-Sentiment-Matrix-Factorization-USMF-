#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Dec  2 16:40:22 2020

@author: nuoyuan
"""

from renew_trainingset import renew_trainingset
from TrainingAlgorithm import TrainingAlgorithm
import numpy as np
import pandas as pd

df_train_topN=pd.DataFrame({}) # the training set for top-N recommendation
df_test_topN=pd.DataFrame({}) # the test set for top-N recommendation
optimal_hpcombination=np.array([]) # the optimal hyperparameter combination for top-N recommendation determined by 5-fold grid search cross validation
c=optimal_hpcombination[3]
expo_prob=[] # This list needs to be computed
opin_scores=[] # This list needs to be computed
df_train_topN=renew_trainingset(df_train_topN,expo_prob,opin_scores,c)
universal_average=df_train_topN["rating"].values.sum()/df_train_topN.shape[0]

# Train USMF on the training set
trainingalgorithm=TrainingAlgorithm(optimal_hpcombination,universal_average)
step=100
trainingalgorithm.sgd(df_train_topN,step)

# Test the trained USMF on the test set for top-N recommendation
unbiased_NDCG_sum_over_users=0
unique_user_index=np.unique(df_test_topN["user_index"].values).tolist()
num_users=len(unique_user_index)
for useri in unique_user_index:
    useri_indices=df_test_topN[df_test_topN["user_index"]==useri].index.tolist()
    df_test_topN_useri=df_test_topN[useri_indices]
    useri_list_rating_predicted=list()
    useri_list_rating_actual=list()
    useri_list_expo_prob=list()
    for useri_item_interaction in df_test_topN_useri.itertuples:
        user_index=useri
        item_index=getattr(useri_item_interaction,"item_index")
        expo_prob=getattr(useri_item_interaction,"exposure_probability")
        rating_actual=getattr(useri_item_interaction,"rating")
        rating_predicted=universal_average+trainingalgorithm.user_bias[user_index]+trainingalgorithm.item_bias[item_index]+np.dot(trainingalgorithm.user_feature[user_index],trainingalgorithm.item_feature[item_index])
        # compute the actual unbiased DCG for the ranked item list recommended by USMF to useri
        useri_list_expo_prob.append(expo_prob)
        useri_list_rating_actual.append(rating_actual)
        useri_list_rating_predicted.append(rating_predicted)
    def ranking_based_on_rating(list_rating):
        """
        Parameters
        ----------
        list_rating : A Python built-in list of ratings

        Returns
        --------
        list_ranking: A Python built-in list of size equal to that of list_rating, 
        containing rank scores computed in a descending fashion (i.e., 
        the largest value in list_rating is assigned a rank score of 1) using the "competition ranking" method 
        (i.e.,  The minimum of the ranks that would have been assigned to all the tied values is assigned to each value.)
        """
        from scipy.stats import rankdata
        list_ranking_reversed=rankdata(list_rating,method="max")
        list_ranking=list()
        num_elements=len(list_rating)
        for reversed_rank in list_ranking_reversed:
            list_ranking.append(num_elements-reversed_rank+1)
        return list_ranking
    def get_unbiasedDCG(ranking_predicted,rating_actual,expo_prob):
        """
        Parameters
        ----------
        ranking_predicted : A Python built-in list of rank scores for the predicted ratings on a select group of items generated by a recommendation system
        rating_actual : A Python built-in list of the actual ratings on the same group of items as those associated with ranking_predicted
        expo_prob : A Python built-in list of the exposure probability estimates associated with the same group of items as those associated with ranking_predicted
        Returns
        -------
        unbiasedDCG: The unbiased DCG for the recommended list
        """
        unbiasedDCG=0
        for index,ranking in enumerate(ranking_predicted):
            unbiasedDCG+=((2**rating_actual[index]-1)/np.log2(ranking+1))/expo_prob[index]
        return unbiasedDCG
    # compute the actual unbiased DCG for the ranked item list recommended by USMF to useri (i.e., actual_unbiasedDCG)
    useri_list_ranking_predicted=ranking_based_on_rating(useri_list_rating_predicted)
    actual_unbiasedDCG=get_unbiasedDCG(useri_list_ranking_predicted,useri_list_rating_actual,useri_list_expo_prob)
    # compute the unbiased DCG for the ideal ranked item list for useri (i.e., ideal_unbiasedDCG)
    useri_list_ranking_actual=ranking_based_on_rating(useri_list_rating_actual)
    ideal_unbiasedDCG=get_unbiasedDCG(useri_list_ranking_actual,useri_list_rating_actual,useri_list_expo_prob)
    # compute the negative unbiased NDCG for the ranked item list recommended by USMF to useri 
    unbiasedNDCG=actual_unbiasedDCG/ideal_unbiasedDCG
    unbiased_NDCG_sum_over_users+=unbiasedNDCG
unbiased_NDCG_average=unbiased_NDCG_sum_over_users/num_users

    
    